# PIDA-implementation
This repository present a refernce formulation of the Proportional Integrative Derivatuive Accelerative (PIDA) controller called also Proportional Integrative Double Derivative (PIDD) controller.
The **PIDA control law** can be initially written as:

```math
u(t) = k_p \left( e(t) + \frac{1}{T_i} \int_0^t e(\tau) d\tau + T_d \frac{de(t)}{dt} + T_a \frac{d^2 e(t)}{dt^2} \right)
```

Where:

- `k_p` is the proportional gain  
- `T_i` is the integral time constant  
- `T_d` is the derivative time constant  
- `T_a` is the acceleration (second derivative) time constant

The corresponding **transfer function** is:

```math
C(s) = k_p \left( 1 + \frac{1}{T_i s} + T_d s + T_a s^2 \right)
```

This form, however, is a "textbook" representation and is considered **improper**, since it contains more zeros than poles. In practice, the derivative and acceleration actions must be **filtered** to ensure the controller is implementable and robust.

To address this, **first-order and second-order filters** are used for the derivative and acceleration terms, respectively. The modified controller transfer function becomes:

```math
C(s) = k_p \left( 1 + \frac{1}{T_i s} + \frac{T_d s}{(T_d / N)s + 1} + \frac{T_a s^2}{\left((T_a / M)s + 1\right)^2} \right)
```

Where:

- `N` and `M` are tuning parameters defining the low-pass filter pole locations for the derivative and acceleration terms.

Additionally, to improve performance and reduce sensitivity to high-frequency measurement noise, an **input filter** is added. The transfer function of the input filter is:

```math
f_i(s) = \frac{1}{(T_f s + 1)^n}
```

Where:

- `T_f` is the time constant of the input filter  
- `n` is the order of the filter

The input filter ensures smoother control action by attenuating high-frequency components in the reference and feedback signals.

